// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: sarif_parser/sarif_parser.proto

package sarif_parserv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SarifParserClient is the client API for SarifParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SarifParserClient interface {
	Parse(ctx context.Context, opts ...grpc.CallOption) (SarifParser_ParseClient, error)
}

type sarifParserClient struct {
	cc grpc.ClientConnInterface
}

func NewSarifParserClient(cc grpc.ClientConnInterface) SarifParserClient {
	return &sarifParserClient{cc}
}

func (c *sarifParserClient) Parse(ctx context.Context, opts ...grpc.CallOption) (SarifParser_ParseClient, error) {
	stream, err := c.cc.NewStream(ctx, &SarifParser_ServiceDesc.Streams[0], "/sarif_parser.SarifParser/Parse", opts...)
	if err != nil {
		return nil, err
	}
	x := &sarifParserParseClient{stream}
	return x, nil
}

type SarifParser_ParseClient interface {
	Send(*RequestChunk) error
	Recv() (*ResponseChunk, error)
	grpc.ClientStream
}

type sarifParserParseClient struct {
	grpc.ClientStream
}

func (x *sarifParserParseClient) Send(m *RequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sarifParserParseClient) Recv() (*ResponseChunk, error) {
	m := new(ResponseChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SarifParserServer is the server API for SarifParser service.
// All implementations must embed UnimplementedSarifParserServer
// for forward compatibility
type SarifParserServer interface {
	Parse(SarifParser_ParseServer) error
	mustEmbedUnimplementedSarifParserServer()
}

// UnimplementedSarifParserServer must be embedded to have forward compatible implementations.
type UnimplementedSarifParserServer struct {
}

func (UnimplementedSarifParserServer) Parse(SarifParser_ParseServer) error {
	return status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedSarifParserServer) mustEmbedUnimplementedSarifParserServer() {}

// UnsafeSarifParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SarifParserServer will
// result in compilation errors.
type UnsafeSarifParserServer interface {
	mustEmbedUnimplementedSarifParserServer()
}

func RegisterSarifParserServer(s grpc.ServiceRegistrar, srv SarifParserServer) {
	s.RegisterService(&SarifParser_ServiceDesc, srv)
}

func _SarifParser_Parse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SarifParserServer).Parse(&sarifParserParseServer{stream})
}

type SarifParser_ParseServer interface {
	Send(*ResponseChunk) error
	Recv() (*RequestChunk, error)
	grpc.ServerStream
}

type sarifParserParseServer struct {
	grpc.ServerStream
}

func (x *sarifParserParseServer) Send(m *ResponseChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sarifParserParseServer) Recv() (*RequestChunk, error) {
	m := new(RequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SarifParser_ServiceDesc is the grpc.ServiceDesc for SarifParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SarifParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sarif_parser.SarifParser",
	HandlerType: (*SarifParserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Parse",
			Handler:       _SarifParser_Parse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sarif_parser/sarif_parser.proto",
}
